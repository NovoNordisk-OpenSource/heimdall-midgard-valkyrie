version: '3.8'

services:
  # Core services
  host-api:
    image: host-api
    build:
      context: .
      dockerfile: src/Heimdall.Midgard.Valkyrie.Host.Api/Dockerfile
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    networks:
      - heimdall
    ports:
      - "54323:54323"
      - "54324:54324"
    depends_on:
      - database-migration-runner
      - kafka-topic-runner

  host-worker:
    image: host-worker
    build:
      context: .
      dockerfile: src/Heimdall.Midgard.Valkyrie.Host.Worker/Dockerfile
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    networks:
      - heimdall
    depends_on:
      - database-migration-runner
      - kafka-topic-runner

  # Auxiliary services
  database:
    image: postgres:latest
    container_name: database
    hostname: database
    networks:
      - heimdall
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=local"
    ports:
      - "5432:5432"

  database-migration-runner:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    networks:
      - heimdall
    volumes:
      - ./:/app
    command:
      - /bin/bash
      - -c
      - |
        export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.dotnet/tools
        dotnet tool install dotnet-ef -g
        dotnet ef database update --project ./app/src/Heimdall.Midgard.Valkyrie.Infrastructure/Heimdall.Midgard.Valkyrie.Infrastructure.csproj --context ApplicationContext
    depends_on:
      - database

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    hostname: kafka
    container_name: kafka
    networks:
      - heimdall
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-kafka}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo

  kafka-topic-runner:
    image: confluentinc/cp-kafka:7.5.3
    networks:
      - heimdall
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic test-topic-1 --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic test-topic-2 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    depends_on:
      - kafka

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.5.3
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    networks:
      - heimdall
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka

  zoo:
    image: confluentinc/cp-zookeeper:7.5.3
    hostname: zoo
    container_name: zoo
    networks:
      - heimdall
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
      
networks:
  heimdall: