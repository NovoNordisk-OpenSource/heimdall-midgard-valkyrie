// <auto-generated />
using System;
using Heimdall.Midgard.Valkyrie.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Heimdall.Midgard.Valkyrie.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240403133115_StatusUpgrade")]
    partial class StatusUpgrade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Heimdall.Midgard.Valkyrie.Domain.Aggregates.ScaffoldTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("ScaffoldTask", (string)null);
                });

            modelBuilder.Entity("Heimdall.Midgard.Valkyrie.Domain.Aggregates.ScaffoldTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("BuildStatus", (string)null);
                });

            modelBuilder.Entity("Heimdall.Midgard.Valkyrie.Domain.ValueObjects.AccountInfo", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "identifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.HasKey("Identifier");

                    b.ToTable("AccountInfo", (string)null);
                });

            modelBuilder.Entity("Heimdall.Midgard.Valkyrie.Domain.Aggregates.ScaffoldTask", b =>
                {
                    b.HasOne("Heimdall.Midgard.Valkyrie.Domain.ValueObjects.AccountInfo", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Heimdall.Midgard.Valkyrie.Domain.Aggregates.ScaffoldTaskStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Heimdall.Midgard.Valkyrie.Domain.ValueObjects.ScaffoldOption", "Options", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "key");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "value");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ScaffoldOptions");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Options");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
